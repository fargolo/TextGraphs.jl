var documenterSearchIndex = {"docs":
[{"location":"README/#TextGraphs","page":"Instructions","title":"TextGraphs","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"(Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"README/#Introduction","page":"Instructions","title":"Introduction","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"TextGraphs.jl offers Graphs representations of Text, along with natural language proccessing (NLP) functionalities.  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"It is a Julia package inspired by SpeechGraphs(https://repositorio.ufrn.br/jspui/handle/123456789/23273). ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"(Image: No meio do caminho tinha uma pedra. Tinha uma pedra no meio do caminho.)","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"","category":"page"},{"location":"README/#Features","page":"Instructions","title":"Features","text":"","category":"section"},{"location":"README/#Install","page":"Instructions","title":"Install","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Install with Pkg.  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"pkg>add TextGraphs","category":"page"},{"location":"README/#Graphs","page":"Instructions","title":"Graphs","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"You can build the following graphs from text (AbstractString).  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"[X] Naive (naive_graph) uses the original sequence of words.  \n[X] Stem (stem_graph) uses stemmed words.  \n[X] Lemma (lemma_graph): Uses lemmatized words.  \n[X] Part of Speech Graph (POS, pos_graph) uses syntactical functions.  \n[X] Phrases Graph(phrases_graph): Uses the original sequence of phrases.  \n[ ] Latent space embedding (LSE) graphs. ","category":"page"},{"location":"README/#Usage","page":"Instructions","title":"Usage","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"julia>using TextGraphs  \njulia>naive_graph(\"Sample for graph\")  \n{3, 2} directed Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)  \n\njulia>stem_graph(\"Sample for graph\";snowball_language=\"english\") # Optional keyword argument  \n{3, 2} directed Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Outputs are directed Graphs.DiGraph, with properties added through MetaGraphs. One may use standard Graphs.jl functions to extract properties.  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"julia>using Graphs\njulia>stem_g = stem_graph(\"No meio do caminho tinha uma pedra tinha uma pedra no meio do caminho\")\njulia>Graphs.eigenvector_centrality(stem_g)\n8-element Vector{Float64}:\n 0.21815421364567678\n...\n 0.21815421364567675\n\njulia>Graphs.density(stem_g)\n0.16071428571428573","category":"page"},{"location":"README/#Plot","page":"Instructions","title":"Plot","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"using GraphMakie , GLMakie\n\ng = naive_graph(\"Colorless green ideas sleep furiously\")\nstem_g = stem_graph(\"No meio do caminho tinha uma pedra tinha uma pedra no meio do caminho\")\n\ng_labels = map(x -> get_prop(naive_g,x,:token), collect(1:nv(naive_g)))\nstem_g_labels = map(x -> get_prop(stem_g,x,:token), collect(1:nv(stem_g)))\ngraphplot(naive_g,nlabels=g_labels)\ngraphplot(stem_g,nlabels=stem_g_labels)\n\nspec3_layout = Spectral(dim=3)\ngraphplot(naive_g,node_size=30,nlabels=g_labels,layout=spec3_layout)","category":"page"},{"location":"README/#Development-roadmap","page":"Instructions","title":"Development roadmap","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Preprocessing  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"[X] 1 . Tokenize text by sentences.  \n[X] 2 . Tokenize sentences by words.  \n[X] 3 . Stemming  \n[X] 4 . POS\n[X] 5 . Lemmas","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Text to Graph  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"[X] 1 . Generate Graphs from sequence of tokenized words  \n[X] 2 . Generate Graphs from sequence of tokenized sentences  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Graph Measures  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"[X] Centrality measures  ","category":"page"},{"location":"README/#Development-roadmap-2","page":"Instructions","title":"Development roadmap","text":"","category":"section"},{"location":"README/","page":"Instructions","title":"Instructions","text":"[ ] Graphs from LSA embeddings and metric from diffusion models.    \n[ ] Write a separate package to download and load copora (Corpora.jl) for internal usage.  \n[ ] Write a separate package with wrapper for NLP features (UDPipe.jl ?) in R and Python. See (Image: spacy).  \n[ ] Tag within NLP packages in juliapackages.com.  ","category":"page"},{"location":"README/","page":"Instructions","title":"Instructions","text":"Modules = [TextGraphs]","category":"page"},{"location":"README/#TextGraphs.add_prop_label_tokens-Tuple{MetaGraphs.AbstractMetaGraph, Any}","page":"Instructions","title":"TextGraphs.add_prop_label_tokens","text":"add_prop_label_tokens(metagraph,metagraph_unique_tokens)\n\nAdd tokens as properties of nodes in a MetaGraph.\n\nThis function is used internally to attach word labels to each node. Unique tokens must have length equal to the number of vertices\n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.build_labelled_graph-Tuple{AbstractArray}","page":"Instructions","title":"TextGraphs.build_labelled_graph","text":"build_labelled_graph(x::AbstractArray)\n\nThis function is used internally to build graph lebelled with unique tokens.\n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.graph_props-Tuple{MetaGraphs.MetaDiGraph}","page":"Instructions","title":"TextGraphs.graph_props","text":"graph_props(g::MetaDiGraph)\n\nCalculate several properties for a MetaDiGraph.\n\nThis function returns a Dict with numeric values for density, # of self loops, # of SCCs, size of largest SCC,  and mean centrality (betweeness, closeness and eigenvector methods) \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.lemma_graph-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.lemma_graph","text":"lemma_graph(my_text)\n\nBuild lemmatized graph from text (AbstractString) using R package udpipe. \n\nCurrently, supports portuguese and english corpora. \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.link_consecutive-Tuple{AbstractArray}","page":"Instructions","title":"TextGraphs.link_consecutive","text":"link_consecutive(array_with_tokens)\n\nTransform serialized tokens into a directed graph. \n\nThis function is used internally to build graphs from text. Each token has an unique node in the graph.\n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.mean_graph_centrs-Tuple{MetaGraphs.MetaDiGraph}","page":"Instructions","title":"TextGraphs.mean_graph_centrs","text":"meangraphcentrs(g::MetaDiGraph)\n\nCalculate mean values for centrality (betweeness, closeness and eigenvector methods). \n\nThis function returns a Dict with numeric values for each centrality method.  \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.naive_graph-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.naive_graph","text":"naive_graph(raw_text::AbstractString)\n\nBuild graph from text (AbstractString) with unprocessed words.\n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.node_props-Tuple{MetaGraphs.MetaDiGraph}","page":"Instructions","title":"TextGraphs.node_props","text":"node_props(g::MetaDiGraph)\n\nCalculate betweeness, closeness and eigenvector centralities for each node. \n\nThis function returns a Dict with vectors of values for each centrality method.  \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.phrases_graph-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.phrases_graph","text":"phrases_graph(my_text)\n\nBuild graph from text (AbstractString) using sentences as unique tokens. \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.pos_graph-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.pos_graph","text":"pos_graph(my_text)\n\nBuild POS Tagging from text (AbstractString) using R package udpipe. \n\nCurrently, supports portuguese and english corpora. \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.rand_erdos_ratio_props-Tuple{MetaGraphs.MetaDiGraph}","page":"Instructions","title":"TextGraphs.rand_erdos_ratio_props","text":"randerdosratio_props(g::MetaDiGraph)\n\nCalculate ratios between a given MetaDiGraph and a corresponding random Erdős–Rényi graph.\n\nThis function returns a Dict with numeric values for density and  mean centralities (betweeness, closeness and eigenvector methods) \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.stem_graph-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.stem_graph","text":"stem_graph(my_text)\n\nBuild graph from text (AbstractString) using lemmatized words. \n\nStemming is performed with Snowball.jl stemmer. Default language is \"portugese\". \n\n\n\n\n\n","category":"method"},{"location":"README/#TextGraphs.udp_import_annotations-Tuple{AbstractString}","page":"Instructions","title":"TextGraphs.udp_import_annotations","text":"udp_import_annotations(raw_text)\n\nGet anonnotated DataFrame by importing R::udpipe object created with udpipe::annonate. \n\nThis function is used internally.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Functions","title":"Functions","text":"CurrentModule = TextGraphs","category":"page"},{"location":"#TextGraphs","page":"Functions","title":"TextGraphs","text":"","category":"section"},{"location":"","page":"Functions","title":"Functions","text":"Documentation for TextGraphs.","category":"page"},{"location":"#Functionalities","page":"Functions","title":"Functionalities","text":"","category":"section"},{"location":"","page":"Functions","title":"Functions","text":"List of package utilities.  ","category":"page"},{"location":"","page":"Functions","title":"Functions","text":"Modules = [TextGraphs]","category":"page"},{"location":"","page":"Functions","title":"Functions","text":"","category":"page"}]
}
